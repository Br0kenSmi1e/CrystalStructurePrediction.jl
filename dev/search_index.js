var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CrystalStructurePrediction","category":"page"},{"location":"#CrystalStructurePrediction","page":"Home","title":"CrystalStructurePrediction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CrystalStructurePrediction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CrystalStructurePrediction]","category":"page"},{"location":"#CrystalStructurePrediction.BUCKINGHAM_PARAMETERS","page":"Home","title":"CrystalStructurePrediction.BUCKINGHAM_PARAMETERS","text":"BUCKINGHAM_PARAMETERS\n\nA map from the species of two ions to the Buckingham parameters: (A, ρ, C).\n\nA: the well depth.\nρ: the range parameter.\nC: the Buckingham constant.\n\n\n\n\n\n","category":"constant"},{"location":"#CrystalStructurePrediction.Ion","page":"Home","title":"CrystalStructurePrediction.Ion","text":"Ion{D, T}\nIon(type::IonType{T}, frac_pos)\n\nAn ion is a type with a fractional position. D is the dimension of the space, and T is the type of the coordinates.\n\nFields\n\ntype::IonType{T}: The type of the ion.\nfrac_pos::SVector{D, T}: The fractional position of the ion.\n\n\n\n\n\n","category":"type"},{"location":"#CrystalStructurePrediction.IonType","page":"Home","title":"CrystalStructurePrediction.IonType","text":"IonType{T}\nIonType(species::Symbol, charge::Int, radii::T)\n\nAn ion type is a species with a charge and a radius. T is the type of the coordinates.\n\nFields\n\nspecies::Symbol: The species of the ion.\ncharge::Int: The charge of the ion.\nradii::T: The radius of the ion.\n\nExamples\n\nTo define an ion type with species \"O\", charge -2, radius 1.35, run\n\njulia> IonType(:O, -2, 1.35)\nIonType{Float64}(:O, -2, 1.35)\n\n\n\n\n\n","category":"type"},{"location":"#CrystalStructurePrediction.Lattice","page":"Home","title":"CrystalStructurePrediction.Lattice","text":"Lattice{D, T, L}\nLattice(vectors::AbstractMatrix{T}) where {D, T}\n\nA lattice is a set of vectors that define the unit cell of a crystal.\n\nFields\n\nvectors::SMatrix{D, D, T, L}: The vectors that define the unit cell of a crystal.\n\n\n\n\n\n","category":"type"},{"location":"#CrystalStructurePrediction.interaction_energy-Union{Tuple{T}, Tuple{D}, Tuple{Ion{D, T}, Ion{D, T}, Lattice{D, T}, T, NTuple{D, Int64}, NTuple{D, Int64}, NTuple{D, Int64}}, Tuple{Ion{D, T}, Ion{D, T}, Lattice{D, T}, T, NTuple{D, Int64}, NTuple{D, Int64}, NTuple{D, Int64}, T}, Tuple{Ion{D, T}, Ion{D, T}, Lattice{D, T}, T, NTuple{D, Int64}, NTuple{D, Int64}, NTuple{D, Int64}, T, T}, Tuple{Ion{D, T}, Ion{D, T}, Lattice{D, T}, T, NTuple{D, Int64}, NTuple{D, Int64}, NTuple{D, Int64}, T, T, T}, Tuple{Ion{D, T}, Ion{D, T}, Lattice{D, T}, T, NTuple{D, Int64}, NTuple{D, Int64}, NTuple{D, Int64}, Vararg{T, 4}}} where {D, T}","page":"Home","title":"CrystalStructurePrediction.interaction_energy","text":"interaction_energy(ion_a, ion_b, lattice, alpha, real_depth, reciprocal_depth, buckingham_depth, buckingham_threshold, buckingham_penalty, radii_threshold, radii_penalty)\n\nCompute the interaction energy between two ions, which is a sum of the real space Ewald sum, the reciprocal space Ewald sum, the Buckingham potential, and the radii penalty.\n\nArguments\n\nion_a::Ion{D, T}: the first ion.\nion_b::Ion{D, T}: the second ion.\nlattice::Lattice{D, T}: the lattice.\nalpha::T: the Ewald parameter.\nreal_depth::NTuple{D, Int}: summation depth on the dimensions for the real space Ewald sum.\nreciprocal_depth::NTuple{D, Int}: summation depth on the dimensions for the reciprocal space Ewald sum.\nbuckingham_depth::NTuple{D, Int}: summation depth on the dimensions for the Buckingham potential.\n\nKeyword arguments\n\nbuckingham_threshold::T=0.75: the threshold for the Buckingham potential.\nbuckingham_penalty::T=3e2: the penalty for the Buckingham potential.\nradii_threshold::T=0.0: the threshold for the radii penalty, defined as the ratio of the distance between the two ions to the sum of their radii.\nradii_penalty::T=0.0: the penalty for the radii penalty.\n\nNotes\n\nThe Buckingham potential is only summed over the species pairs that are present in the CrystalStructurePrediction.BUCKINGHAM_PARAMETERS dictionary: Dict((:O, :O) => (1388.7, 0.36262, 175.0), (:O, :Ti) => (4590.7279, 0.261, 0.0), (:O, :Sr) => (1952.39, 0.33685, 19.22)) If you want to use a different potential, you can do so by setting the BUCKINGHAM_PARAMETERS dictionary to your desired potential.\n\nReferences\n\na great short note: https://www.cs.cornell.edu/courses/cs428/2006fa/Ewald%20Sum.pdf\n\n\n\n\n\n","category":"method"},{"location":"#CrystalStructurePrediction.ions_on_grid-Union{Tuple{T}, Tuple{N}, Tuple{NTuple{N, Int64}, AbstractArray{IonType{T}, 1}}} where {N, T}","page":"Home","title":"CrystalStructurePrediction.ions_on_grid","text":"ions_on_grid(grid_size::NTuple{N, Int}, type_list::AbstractVector{IonType{T}}) where {N, T}\n\nCreate a list of ions on a grid.\n\nArguments\n\ngrid_size::NTuple{N, Int}: the size of the grid.\ntype_list::AbstractVector{IonType{T}}: the list of ion types.\n\nReturns\n\nA vector of ions: [ion(t1, p1), ion(t1, p2), ..., ion(t1,pn), ion(t2, p1), ..., ion(tm, pn)].\n\nwhere t1, ..., tm are the types of the ions and p1, ..., pn are the fractional positions of the ions on the grid.\n\n\n\n\n\n","category":"method"},{"location":"#CrystalStructurePrediction.optimize_linear-Union{Tuple{T}, Tuple{D}, Tuple{Any, AbstractArray{Ion{D, T}, 1}, Dict{IonType{T}, Int64}, Lattice}} where {D, T<:Real}","page":"Home","title":"CrystalStructurePrediction.optimize_linear","text":"optimize_linear(interaction, ions, populations, lattice; optimizer = SCIP.Optimizer, optimizer_options = Dict(), proximal_threshold = 0.75)\n\nBuild a linear problem for crystal structure prediction. Suited for solvers not supporting quadratic constraints.\n\nArguments\n\ninteraction::Function: The interaction function.\nions::AbstractVector{Ion{D, T}}: The ions.\npopulations::Dict{IonType{T}, Int}: The populations of the ions.\nlattice::Lattice: The lattice.\n\nKeyword arguments\n\noptimizer: The optimizer.\noptimizer_options: The options for the optimizer, e.g. optimizer_options = Dict(\"NodefileSave\" => 1) for Gurobi.\nproximal_threshold: The threshold for the proximal pairs.\n\n\n\n\n\n","category":"method"},{"location":"#CrystalStructurePrediction.optimize_quadratic-Union{Tuple{T}, Tuple{D}, Tuple{Any, AbstractArray{Ion{D, T}, 1}, Dict{IonType{T}, Int64}, Lattice}} where {D, T<:Real}","page":"Home","title":"CrystalStructurePrediction.optimize_quadratic","text":"optimize_quadratic(interaction, ions, populations, lattice; optimizer = SCIP.Optimizer, optimizer_options = Dict(), proximal_threshold = 0.75)\n\nBuild a quadratic problem for crystal structure prediction.\n\nArguments\n\ninteraction::Function: The interaction function.\nions::AbstractVector{Ion{D, T}}: The ions.\npopulations::Dict{IonType{T}, Int}: The populations of the ions.\nlattice::Lattice: The lattice.\n\nKeyword arguments\n\noptimizer: The optimizer.\noptimizer_options: The options for the optimizer, e.g. optimizer_options = Dict(\"NodefileSave\" => 1) for Gurobi.\nproximal_threshold: The threshold for the proximal pairs.\n\n\n\n\n\n","category":"method"},{"location":"#CrystalStructurePrediction.periodic_sum-Union{Tuple{FT}, Tuple{N}, Tuple{FT, NTuple{N, Int64}}} where {N, FT<:Function}","page":"Home","title":"CrystalStructurePrediction.periodic_sum","text":"periodic_sum(interaction, depth)\n\nCompute periodic summation of interaction to given depth.\n\nArguments\n\ninteraction<:Function: the interaction energy, given the shift as a list of integers.\ndepth::NTuple{N, Int}: summation depth on the dimensions.\n\n\n\n\n\n","category":"method"}]
}
